<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JUnit | crafting code.]]></title>
  <link href="http://www.marcphilipp.de/blog/categories/junit/atom.xml" rel="self"/>
  <link href="http://www.marcphilipp.de/"/>
  <updated>2012-02-14T21:07:00+01:00</updated>
  <id>http://www.marcphilipp.de/</id>
  <author>
    <name><![CDATA[Marc Philipp]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JUnit Rules]]></title>
    <link href="http://www.marcphilipp.de/blog/2011/12/22/junit-rules/"/>
    <updated>2011-12-22T14:24:00+01:00</updated>
    <id>http://www.marcphilipp.de/blog/2011/12/22/junit-rules</id>
    <content type="html"><![CDATA[<p>Marc Philipp, andrena objects ag<br/>
Stefan Birkner, Immobilien Scout GmbH<br/>
<em>Erschienen in Java aktuell, 1/2012, dem Magazin der <a href="http://www.ijug.eu/">iJUG</a>.</em></p>

<p><em>Automatisierte Tests sind aus der heutigen Softwareentwicklung nicht mehr wegzudenken. JUnit ist das älteste und bekannteste Testing-Framework für Java. Doch selbst ein so etabliertes und einfach zu benutzendes Framework wird kontinuierlich weiterentwickelt. Eine der Neuerungen sind JUnit Rules, die Entwicklern eine neue mächtige Möglichkeit bieten, Tests zu formulieren und besser zu strukturieren.</em></p>

<!--more-->


<p>Der Legende nach haben Kent Beck und Erich Gamma 1997 den Kern von JUnit auf dem Weg zu einer Konferenz im Flugzeug zwischen Zürich und Atlanta geschrieben. JUnit griff die Idee wieder auf, die Beck 1994 mit SUnit [<a href="http://www.xprogramming.com/testfram.htm" title="Kent Beck, Simple Smalltalk Testing: With Patterns">1</a>] für Smalltalk eingeführt hatte: ein Testing-Framework, dessen Zielgruppe Programmierer sind, also dieselben Leute, die auch den Code schreiben, den es zu testen gilt. JUnit ist inzwischen weit verbreitet. Es wird nicht nur zum Schreiben von Unittests, sondern auch zur Automatisierung von Integrations- und Akzeptanztests verwendet.</p>

<p>Viele erfolgreiche Open-Source-Projekte zeichnen sich dadurch aus, dass mit der Zeit immer neue Features eingebaut werden. Dies führt häufig dazu, dass einst simple Bibliotheken unübersichtlich und schwer wartbar werden. JUnit geht hier gezielt einen anderen Weg. David Saff, neben Kent Beck der zweite Maintainer von JUnit, sieht das so: „JUnit is the intersection of all possible useful Java test frameworks, not their union”.</p>

<p>Die Wahrnehmung in der Java-Entwicklergemeinde ist dementsprechend: Da JUnit so einfach ist, meint jeder, der es schon einmal benutzt hat, es gut zu kennen. Das ist einerseits gut, denn die Hürde Unittests zu schreiben ist so sehr niedrig. Andererseits führt es dazu, dass Neuerungen von vielen Entwicklern gar nicht oder erst verzögert wahrgenommen werden. Fragt man Entwicklerkollegen nach Neuerungen in JUnit, wird häufig die Umstellung von Vererbung auf Annotations-basierte Testschreibweise in Version 4.0 erwähnt.</p>

<p>Seitdem hat sich allerdings einiges getan. Die neueste Innovation, die mit Version 4.7 eingeführt wurde, heißt Rules. Zugegeben, unter dem Begriff kann man sich erst einmal nichts vorstellen. Hat man sich diese „Regeln” für Tests aber einmal eingehend angesehen -- und genau das werden wir in diesem Artikel tun -- stellt man fest: Rules werden die Art, wie wir JUnit-Tests schreiben, nachhaltig verändern.</p>

<h2>Was sind Rules?</h2>

<p>Mithilfe von JUnit-Rules lässt sich die Ausführung von Tests beeinflussen. Ähnlich einem Aspekt in der aspektorientierten Programmierung (AOP) kann die Rule Code vor, nach oder anstelle einer Testmethode ausführen [<a href="http://blog.schauderhaft.de/2009/10/04/junit-rules/" title="Blog von Jens Schauder">2</a>]. Hinter dieser abstrakten Beschreibung steckt ein mächtiges Werkzeug, wie die folgenden Beispiele zeigen.</p>

<h2>Standard-Rules</h2>

<p>JUnit selbst liefert fünf Rules mit, an denen wir den praktischen Einsatz zeigen (der Quellcode aller Beispiele ist auf GitHub verfügbar [<a href="http://marcphilipp.github.com/junit-rules/" title="Source Code der Beispiele auf GitHub">3</a>]).</p>

<h3>Temporäre Dateien</h3>

<p>Beim Testen von Code, der Dateioperationen ausführt, steht man häufig vor dem Problem, dass der Test temporär eine Datei benötigt, die nach dem Test wieder gelöscht werden soll. Bisher brachte man den entsprechenden Code in @Before- und @After-Methoden unter, wie das folgende Beispiel zeigt.</p>

<p>```java
public class TemporaryFolderWithoutRule {</p>

<pre><code>private File folder;

@Before
public void createTemporaryFolder() throws Exception {
    folder = File.createTempFile("myFolder", "");
    folder.delete();
    folder.mkdir();
}

@Test
public void test() throws Exception {
    File file = new File(folder, "test.txt");
    file.createNewFile();
    assertTrue(file.exists());
}

@After
public void deleteTemporaryFolder() {
    recursivelyDelete(folder);
}

private void recursivelyDelete(File file) {
    File[] files = file.listFiles();
    if (files != null) {
        for (File each : files) {
            recursivelyDelete(each);
        }
    }
    file.delete();
}
</code></pre>

<p>}
```</p>

<p>Dieser Test kann mit der <code>TemporaryFolder</code>-Rule wesentlich kürzer und prägnanter formuliert werden, da die Rule den Framework-Code kapselt.</p>

<p>Um die Rule zu verwenden, muss innerhalb des Tests ein Feld vom Typ <code>TemporaryFolder</code> angelegt werden. Dieses Feld muss <code>public</code> sein und mit der Annotation <code>@Rule</code> markiert werden, sodass JUnit die Rule erkennt. So markierte Rules wirken sich auf die Ausführung aller Testmethoden einer Testklasse aus.</p>

<p>```java
public class TemporaryFolderWithRule {</p>

<pre><code>@Rule
public TemporaryFolder folder = new TemporaryFolder();

@Test
public void test() throws Exception {
    File file = folder.newFile("test.txt");
    assertTrue(file.exists());
}
</code></pre>

<p>}
```</p>

<p>Die Testmethode <code>test()</code> legt mithilfe der <code>TemporaryFolder</code>-Rule die Datei <code>test.txt</code> an und überprüft danach, dass die Datei erzeugt wurde. Doch wo wurde die Datei erzeugt? Der Name <code>TemporaryFolder</code> suggeriert es bereits: in einem temporären Ordner. Doch die Rule legt die Datei nicht nur an, sondern löscht sie nach dem Test auch wieder, inklusive des temporären Ordners.</p>

<h3>Timeout</h3>

<p>Es kommt gelegentlich vor, dass man Code schreibt, der versehentlich Endlosschleifen enthält. Ein JUnit-Test, der diese Codestellen testet, läuft in diese Endlosschleifen. Bei Verwendung der <code>Timeout</code>-Rule schlagen solche Tests fehl, da sie nicht innerhalb der vorgegebenen Zeit beendet werden.</p>

<p>```java
public class GlobalTimeout {</p>

<pre><code>@Rule
public Timeout timeout = new Timeout(20); //timeout nach 20 ms

@Test
public void firstTest() {
    while (true) {}
}

@Test
public void secondTest() {
    for (;;) {}
}
</code></pre>

<p>}
```</p>

<p>Führt man diesen Test aus, schlagen beide Testmethoden fehl. Würde man die Rule nicht verwenden, liefe dieser Test endlos.</p>

<p>Wer bisher den <code>timeout</code>-Parameter der <code>@Test</code>-Annotation verwendet hat, kann diesen durch die <code>Timeout</code>-Rule ersetzen. Die Rule bietet den Vorteil, dass sie nur einmal in der Klasse definiert werden muss und dann für alle Testmethoden gilt.</p>

<h3>Erwartete Exceptions</h3>

<p>Schon bisher kann das Auftreten von Exceptions mit dem <code>expected</code>-Parameter der <code>@Test</code>-Annotation getestet werden. Die <code>ExpectedException</code>-Rule erweitert die Test-Möglichkeiten für Exceptions. Damit lassen sich neben der Klasse auch die Message und mittels Hamcrest-Matchern sogar beliebige Details der geworfenen Exception testen.</p>

<p>```java
public class ExpectedExceptionWithRule {</p>

<pre><code>int[] threeNumbers = { 1, 2, 3 };

@Rule public ExpectedException thrown = ExpectedException.none();

@Test
public void exception() {
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    threeNumbers[3] = 4;
}

@Test
public void exceptionWithMessage() {
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    thrown.expectMessage("3");
    threeNumbers[3] = 4;
}
</code></pre>

<p>}
```</p>

<h3>Fehler sammeln</h3>

<p>Üblicherweise bricht ein Test nach der ersten fehlgeschlagenen Assertion ab. Will man in einem Test trotzdem alle Assertions abarbeiten, kann man den <code>ErrorCollector</code> verwenden. Er sammelt fehlgeschlagene Assertions innerhalb einer Testmethode und gibt am Ende eine Liste der Fehlschläge aus. So kann man etwa alle Elemente in einer Liste überprüfen und den Test erst am Ende fehlschlagen lassen, wenn die Überprüfung eines oder mehrerer Elemente fehlgeschlagen ist.</p>

<p>```java
public class ErrorCollectingTest {</p>

<pre><code>@Rule
public ErrorCollector collector = new ErrorCollector();

@Test
public void test() {
    collector.checkThat(1 + 1, is(3));
    collector.addError(new Exception("something went wrong"));
}
</code></pre>

<p>}
```</p>

<p>Wenn man diesen Test ausführt, erhält man zwei Fehlernachrichten mit jeweils einem Stacktrace, der einen zu der Zeile im Programmcode führt, wo die Überprüfung fehlgeschlagen ist.</p>

<h3>Testname</h3>

<p>Um innerhalb einer Testmethode auf deren Namen zuzugreifen, kann man die <code>TestName</code>-Rule verwendet.</p>

<p>```java
public class NameRuleTest {</p>

<pre><code>@Rule
public TestName test = new TestName();

@Test
public void test() {
    assertThat(test.getMethodName(), is("test"));
}
</code></pre>

<p>}
```</p>

<h2>Rules selber schreiben</h2>

<p>Die von JUnit bereitgestellten Rules sind nur der Anfang. Wer sich das Schreiben von Tests erleichtern will, kann seine eigenen Rules schreiben. Das sind letztendlich Klassen, die das Interface <code>TestRule</code> mit der Methode <code>apply(...)</code> implementieren. Für die häufigsten Anwendungsfälle greift uns JUnit unter die Arme und stellt die drei Templateklassen <code>ExternalResource</code>, <code>TestWatcher</code> und <code>Verifier</code> zur Verfügung.</p>

<h3>Bereitstellung externer Ressourcen</h3>

<p>Vielfach werden, insbesondere bei Integrationstests, externe Ressourcen wie Dateien, Server oder Verbindungen benötigt. Diese müssen dem Test zur Verfügung gestellt und nach dessen Ausführung wieder aufgeräumt werden.</p>

<p>Dieses Ressourcenhandling lässt sich recht einfach mit einer Rule abbilden, indem man von der Basisklasse <code>ExternalResource</code> ableitet. In der neuen Rule überschreibt man die <code>before()</code>-Methode, um die Ressource bereitzustellen, und die <code>after()</code>-Methode um sie nach dem Test wieder aufzuräumen. Ein Beispiel hierfür ist die <code>TemporaryFolder</code>-Rule, die in der <code>before()</code>-Methode ein neues Verzeichnis erstellt und es in der <code>after()</code>-Methode wieder löscht.</p>

<p>Wie einfach sich eine solche Rule schreiben lässt, demonstriert das folgende Beispiel. Möchte man für einen Test sicherstellen, dass eine System Property einen bestimmten Wert hat und nach dem Test der alte Wert wiederhergestellt wird, könnte man die Methoden <code>before()</code> und <code>after()</code> wie folgt implementieren:</p>

<p>```java
public class ProvideSystemProperty extends ExternalResource {</p>

<pre><code>private final String key, value;
private String oldValue;

public ProvideSystemProperty(String key, String value) {
    this.key = key;
    this.value = value;
}

@Override
protected void before() {
    oldValue = System.getProperty(key);
    System.setProperty(key, value);
}

@Override
protected void after() {
    if (oldValue == null) {
        System.clearProperty(key);
    } else {
        System.setProperty(key, oldValue);
    }
}
</code></pre>

<p>}
```</p>

<p>Und schon kann man die Rule in einem Test verwenden:</p>

<p>```java
public class SomeTestUsingSystemProperty {</p>

<pre><code>@Rule
public ProvideSystemProperty property = new ProvideSystemProperty("someKey", "someValue");

@Test
public void test() {
    assertThat(System.getProperty("someKey"), is("someValue"));
}
</code></pre>

<p>}
```</p>

<h3>Benachrichtigung über die Testausführung</h3>

<p>Da man mit einer Rule Code vor und nach dem Aufruf der Testmethoden ausführen kann, lässt sich damit eine Benachrichtigung über die Testausführung realisieren. Dazu stellt JUnit die abstrakte Oberklasse <code>TestWatcher</code> bereit. Diese besitzt vier leer implementierte Methoden, die man nach Bedarf überschreiben kann: <code>starting()</code>, <code>succeeded()</code>, <code>failed()</code> und <code>finished()</code>:</p>

<p>```java
public class BeepOnFailure extends TestWatcher {</p>

<pre><code>@Override
protected void failed(Throwable e, Description description) {
    Toolkit.getDefaultToolkit().beep();
}
</code></pre>

<p>}
```</p>

<p>Die Benutzung in einem Test sieht dann so aus:</p>

<p>```java
public class FailingTestThatBeeps {</p>

<pre><code>@Rule
public BeepOnFailure beep = new BeepOnFailure();

@Test
public void test() {
    fail();
}
</code></pre>

<p>}
```</p>

<h3>Überprüfungen nach den Tests</h3>

<p>Das dritte von JUnit zur Verfügung gestellte Template ist der <code>Verifier</code>. Dort kann man die Methode <code>verify()</code> überschreiben, die nach jedem erfolgreichen Test ausgeführt wird. In dieser Methode lassen sich zusätzliche Überprüfungen unterbringen, die im Fehlerfall eine Exception werfen, um den Test doch noch scheitern zu lassen.</p>

<p>Eine Beispielimplementierung von <code>Verifier</code> ist der weiter oben vorgestellte <code>ErrorCollector</code>. Während des Testlaufs sammelt er alle fehlgeschlagenen Assertions und wirft im Fehlerfall eine <code>MultipleFailureException</code> am Ende des Tests.</p>

<h3>TestRule implementieren</h3>

<p>Anstatt eines der Templates zu verwenden kann man das Interface <code>TestRule</code> auch direkt implementieren. Dieses Interface hat genau eine Methode</p>

<p><code>java
Statement apply(Statement base, Description description);
</code></p>

<p>Das erste Argument <code>base</code> kapselt den auszuführenden Test, der sich mittels <code>evaluate()</code> ausführen lässt. Die <code>description</code> stellt Informationen zum Test zu Verfügung (bspw. den Testnamen). Der Rückgabewert der Methode ist ein <code>Statement</code> dass anstelle des Tests ausgeführt wird. Üblicherweise delegiert das neue <code>Statement</code> den Aufruf von <code>evaluate()</code> an den ursprünglichen Test und führt zusätzlich weitere Methoden aus. Der folgende Code zeigt beispielhaft die leicht abgewandelte Implementierung des <code>ExternalResource</code>-Templates.</p>

<p>```java
public Statement apply(Statement base, Description description) {</p>

<pre><code>return new Statement() {
    @Override
    public void evaluate() throws Throwable {
        before();
        try {
            base.evaluate();
        } finally {
            after();
        }
    }
};
</code></pre>

<p>}
```</p>

<p>Hier wird zuerst die Template-Methode <code>before()</code> ausgeführt, dann der Test selbst mittels <code>base.evaluate()</code> und zum Schluss die zweite Template-Methode <code>after()</code>.</p>

<h2>Regeln auf Klassenebene</h2>

<p>Alle Rules, die wir bisher gesehen haben, wurden für jede Methode einzeln angewandt, genauso wie Methoden, die mit <code>@Before</code> und <code>@After</code> annotiert sind, vor bzw. nach jedem Test ausgeführt werden. Manchmal möchte man allerdings die Möglichkeit haben, Code nur einmal vor der ersten bzw. nach der letzten Testmethode in einer Klasse auszuführen. Ein häufiger Anwendungsfall sind Integrationstests, die eine Verbindung zu einem Server aufbauen und wieder schließen müssen. Das war bisher nur mit den Annotations <code>@BeforeClass</code> bzw. <code>@AfterClass</code> möglich, Rules konnte man dazu nicht verwenden. Um dieses Problem zu lösen, wurde in JUnit 4.9 die <code>@ClassRule</code>-Annotation eingeführt.</p>

<p>Um eine <code>ClassRule</code> zu verwenden, annotiert man ein Feld in der Testklasse, das analog zu <code>@BeforeClass</code>-/<code>@AfterClass</code>-Methoden <code>public</code> und <code>static</code> sein muss. Der Typ des Feldes muss wie bei der <code>@Rule</code>-Annotation das <code>TestRule</code>-Interface implementieren. Eine solche Rule lässt sich nicht nur in einer normalen Testklasse verwenden, sondern auch in einer Test-Suite, wie das folgende Beispiel [<a href="http://github.com/KentBeck/junit/blob/master/doc/ReleaseNotes4.9.txt" title="JUnit 4.9 Release Notes">4</a>] illustriert:</p>

<p>```java
@RunWith(Suite.class)
@SuiteClasses({A.class, B.class, C.class})
public class UsesExternalResource {</p>

<pre><code>public static Server myServer = new Server();

@ClassRule
public static ExternalResource connection = new ExternalResource() {

    @Override protected void before() throws Throwable {
        myServer.connect();
    };

    @Override protected void after() {
        myServer.disconnect();
    };
};
</code></pre>

<p>}
```</p>

<h2>Mehrere Regeln kombinieren</h2>

<p>Einen weiteren Vorteil von Rules gegenüber Hilfsmethoden in Testoberklassen stellt ihre Kombinierbarkeit dar. Es lassen sich beliebig viele Rules in einem Test verwenden:</p>

<p>```java
public class CombiningMultipleRules {</p>

<pre><code>@Rule public TestRule beep = new BeepOnFailure();
@Rule public ExpectedException exceptions = ExpectedException.none();
@Rule public TestName test = new TestName();

@Test
public void test() {
    exceptions.expect(IllegalArgumentException.class);
    throw new RuntimeException("Hello from " + test.getMethodName());
}
</code></pre>

<p>}
```</p>

<p>Das funktioniert wunderbar, solange die Rules voneinander unabhängig sind. JUnit macht absichtlich keinerlei Zusicherungen was die Reihenfolge der Abarbeitung von Rules angeht [<a href="http://tech.groups.yahoo.com/group/junit/message/23537" title="Mailing List Post von Kent Beck über das Design von Rules">5</a>]. Manchmal möchte man aber dennoch eine bestimmte Reihenfolge vorgeben. Angenommen man hat zwei Rules, von denen die erste eine bestimmte Ressource zur Verfügung stellt, die von der zweiten Rule benutzt wird. Dann möchte man sehr wohl sicherstellen, dass zuerst die Ressource bereitgestellt wird, bevor sie konsumiert wird. Dafür wurde in JUnit 4.10 die <code>RuleChain</code>-Klasse eingeführt. <code>RuleChain</code> implementiert selbst das <code>TestRule</code>-Interface, kann also verwendet werden, wie eine normale Rule [<a href="http://github.com/KentBeck/junit/blob/master/doc/ReleaseNotes4.10.txt" title="JUnit 4.10 Release Notes">6</a>]:</p>

<p>```java
public class UseRuleChain {</p>

<pre><code>@Rule
public TestRule chain = RuleChain.outerRule(new LoggingRule("outer rule"))
        .around(new LoggingRule("middle rule"))
        .around(new LoggingRule("inner rule"));
@Test
public void test() {}
</code></pre>

<p>}
```</p>

<p>Wenn man diesen Test ausführt, erhält man folgende Ausgabe:</p>

<p><code>
starting outer rule
starting middle rule
starting inner rule
finished inner rule
finished middle rule
finished outer rule
</code></p>

<p>Die erste Regel (<code>outer rule</code>) umschließt also die mittlere (<code>middle rule</code>) und diese wiederum die dritte und letzte (<code>inner rule</code>).</p>

<h2>Schreib deine eigenen Regeln!</h2>

<p>Warum sollte man Rules verwenden? Ein großer Pluspunkt von Rules ist ihre <em>Wiederverwendbarkeit</em>. Sie ermöglichen häufig benutzten Code, der bisher in <code>@Before</code>/<code>@After</code>-Methoden oder einer Testoberklasse stand, in eine eigene <code>TestRule</code>-Klasse auszulagern, die nur eine Verantwortlichkeit hat.</p>

<p>Ein weiterer Vorteil ist die <em>Kombinierbarkeit</em> von Rules. Wie wir in diesem Artikel gesehen haben, lassen sich beliebig viele Regeln in einem Test verwenden, sowohl auf Klassen- als auch auf Methodenebene. Viele Dinge, für die es in der Vergangenheit eines eigenen Test Runners bedurfte, lassen sich jetzt mit Rules implementieren. Da man immer nur einen Test Runner aber beliebig viele Rules verwenden kann, stehen einem deutlich mehr Möglichkeiten offen.</p>

<p>Rules sind die Umsetzung von <em>Delegation statt Vererbung</em> für Unittests. Wo früher Testklassenhierarchien mit Utility-Methoden gewuchert sind, kann man jetzt auf einfache Art und Weise verschiedene Rules kombinieren.</p>

<p>Die vorgestellten, konkreten Rules demonstrieren lediglich die Vielfältigkeit der Einsatzmöglichkeiten. Eigene Regeln zu schreiben ist Dank der zur Verfügung gestellten Templateklassen einfach. Erst diese <em>Erweiterbarkeit</em> macht Rules zu einem wirklichen Novum.</p>

<p>Die Macher von JUnit setzen jedenfalls für die Zukunft von JUnit voll auf den Einsatz und die Erweiterung von Rules. Kent Beck schreibt darüber in seinem Blog [<a href="http://www.threeriversinstitute.org/blog/?p=155" title="Blog von Kent Beck">7</a>]: „Maybe once every five years unsuspectedly powerful abstractions drop out of a program with no apparent effort.”</p>

<h2>Links &amp; Literatur</h2>

<ol>
<li><a href="http://www.xprogramming.com/testfram.htm" title="Kent Beck, Simple Smalltalk Testing: With Patterns">Kent Beck, Simple Smalltalk Testing: With Patterns</a></li>
<li><a href="http://blog.schauderhaft.de/2009/10/04/junit-rules/" title="Blog von Jens Schauder">Blog von Jens Schauder</a></li>
<li><a href="http://marcphilipp.github.com/junit-rules/" title="Source Code der Beispiele auf GitHub">Source Code der Beispiele auf GitHub</a></li>
<li><a href="http://github.com/KentBeck/junit/blob/master/doc/ReleaseNotes4.9.txt" title="JUnit 4.9 Release Notes">JUnit 4.9 Release Notes</a></li>
<li><a href="http://tech.groups.yahoo.com/group/junit/message/23537" title="Mailing List Post von Kent Beck über das Design von Rules">Mailing List Post von Kent Beck über das Design von Rules</a></li>
<li><a href="http://github.com/KentBeck/junit/blob/master/doc/ReleaseNotes4.10.txt" title="JUnit 4.10 Release Notes">JUnit 4.10 Release Notes</a></li>
<li><a href="http://www.threeriversinstitute.org/blog/?p=155" title="Blog von Kent Beck">Blog von Kent Beck</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primitive Matt(ch)ers?]]></title>
    <link href="http://www.marcphilipp.de/blog/2010/11/16/primitive-matt-ch-ers/"/>
    <updated>2010-11-16T20:34:00+01:00</updated>
    <id>http://www.marcphilipp.de/blog/2010/11/16/primitive-matt-ch-ers</id>
    <content type="html"><![CDATA[<p>The <a href="http://code.google.com/p/hamcrest/">Hamcrest project</a> provides a large number of matchers, i.e. declaratively defined predicates. Prominent uses of these matchers include testing and mocking libraries like JUnit and jMock, respectively.</p>

<h3>How to use them?</h3>

<p>```java
@Test
public void onePlusOneIsTwo() {</p>

<pre><code>assertThat(1 + 1, is(2));
</code></pre>

<p>}
```</p>

<p>While the above example is simple, it demonstrates one of the benefits of using <code>assertThat()</code> and Hamcrest matchers: assertions become very readable. Unfortunately, you often have to rely on a questionable Java mechanism: auto boxing/unboxing.</p>

<p>Auto boxing and unboxing have been introduced in Java 5 to ease the use of primitive types and their counterparts: <em>real</em> objects (a.k.a. reference types). However, especially unboxing can lead to hidden NullPointerExceptions and thus is discouraged by many developers. For details see <a href="http://pboop.wordpress.com/2010/09/22/autoboxing-is-evil/">Autoboxing is Evil</a> by Nicole Rauch and Andreas Leidig.</p>

<p>For this reason, the Eclipse Java compiler optionally shows warnings whenever boxing or unboxing occurs. While it is certainly a good idea to enable this warning, it also puts markers on code that is perfectly sane, like the test case above. To prevent un-/boxing and use matchers at the same time, one can go back to pre-Java 5 times and convert the
primitive literals explicitly:</p>

<p>```java
@Test
public void onePlusOneIsTwo() {</p>

<pre><code>assertThat(Integer.valueOf(1 + 1), is(Integer.valueOf(2)));
</code></pre>

<p>}
```</p>

<p>However, this is not readable anymore!</p>

<h3>Why do we need boxing in the first place?</h3>

<p>When using <code>assertThat()</code> we need boxing for two reasons. First, there is no definition of <code>assertThat()</code> for primitive types, only for reference types:</p>

<p><code>java
&lt;T&gt; void assertThat(T actual, Matcher&lt;T&gt; matcher)
</code></p>

<p>Well, why don't we overload <code>assertThat()</code> with separate method definitions for each primitive type, you might say.</p>

<p><code>java
void assertThat(int actual, Matcher&lt;int&gt; matcher)
</code></p>

<p>Java's generics do not allow primitive types like <code>int</code> as type arguments, only reference types are allowed.</p>

<h3>Hmm, anything we <em>can</em> do?</h3>

<p>Yes! So how about</p>

<p>```java
void assertThat(int actual, Matcher<Integer> matcher) {</p>

<pre><code>assertThat(Integer.valueOf(actual), matcher);
</code></pre>

<p>}
```</p>

<p>Without using auto boxing, we can now write:</p>

<p>```java
@Test
public void onePlusOneIsTwo() {</p>

<pre><code>assertThat(1 + 1, is(Integer.valueOf(2)));
</code></pre>

<p>}
```</p>

<p>That solves half of our problem: We got rid of the first boxing by overloading <code>assertEquals()</code>. However, we still need to explicity convert our <code>int</code> to <code>Integer</code> when calling the matcher factory method. Thus, we also need to overload the <code>is()</code> method:</p>

<p>```java
Matcher<Integer> is(int value) {</p>

<pre><code>return is(Integer.valueOf(value));
</code></pre>

<p>}
```</p>

<p>Problem solved! Really? Obviously, it requires a lot of work do define extra matcher factory methods for every combination of primitive type and matcher.</p>

<h3>Solution: generate it!</h3>

<p>Hamcrest already allows to <a href="http://code.google.com/p/hamcrest/wiki/Tutorial#Sugar_generation">generate matcher libraries</a>, i.e. classes that collect all static factory methods for easy access at a single entry point. So, we could simply generate extra methods for every matcher. To stay with the example from above, if we have an
unrestricted <code>Matcher&lt;T&gt;</code>, we would generate the following eight overloading methods:</p>

<p>```java
Matcher<Byte> is(byte value) {</p>

<pre><code>return is(Byte.valueOf(value));
</code></pre>

<p>}
Matcher<Short> is(short value) {</p>

<pre><code>return is(Short.valueOf(value));
</code></pre>

<p>}
Matcher<Integer> is(int value) {</p>

<pre><code>return is(Integer.valueOf(value));
</code></pre>

<p>}
Matcher<Long> is(long value) {</p>

<pre><code>return is(Long.valueOf(value));
</code></pre>

<p>}
Matcher<Float> is(float value) {</p>

<pre><code>return is(Float.valueOf(value));
</code></pre>

<p>}
Matcher<Double> is(double value) {</p>

<pre><code>return is(Double.valueOf(value));
</code></pre>

<p>}
Matcher<Boolean> is(boolean value) {</p>

<pre><code>return is(Boolean.valueOf(value));
</code></pre>

<p>}
Matcher<Character> is(char value) {</p>

<pre><code>return is(Character.valueOf(value));
</code></pre>

<p>}
```</p>

<p>A matcher declaration which uses the object representation of a primitive type, e.g. <code>Matcher&lt;Integer&gt;</code>, is a special case that is even more simple. We would only need to generate a single extra method, such as</p>

<p>```java
Matcher<Integer> zero(int value) {</p>

<pre><code>return zero(Integer.valueOf(value));
</code></pre>

<p>}
```</p>

<p>Summing up, it would be great if Hamcrest provided built-in support for primitive types.</p>

<h3>Update</h3>

<p>My proposal was <a href="http://code.google.com/p/hamcrest/issues/detail?id=130">rejected</a> by the Hamcrest maintainers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combining SuiteBuilder and ClasspathSuite]]></title>
    <link href="http://www.marcphilipp.de/blog/2010/05/13/combining-suitebuilder-and-classpathsuite/"/>
    <updated>2010-05-13T13:05:00+02:00</updated>
    <id>http://www.marcphilipp.de/blog/2010/05/13/combining-suitebuilder-and-classpathsuite</id>
    <content type="html"><![CDATA[<p>In a recent <a href="http://github.com/KentBeck/junit/commit/f09cff79b941a525271f3f2838a9742b4c5c8d36">commit</a> to JUnit Kent Beck and David Saff have added an "alpha-ready implementation of <code>SuiteBuilder</code>". As Kent Beck previously described in a <a href="http://www.threeriversinstitute.org/blog/?p=456">blog post</a>, the idea behind the <code>SuiteBuilder</code> runner is to use annotations on fields instead of annotations on classes.</p>

<h3>Limitations of regular test suites</h3>

<p>While an annotation can take parameters the arguments must be literals, e.g. constant String values or class literals. For example, the classic <code>Suite</code> runner is configured using the <code>@SuiteClasses</code> annotation that takes an array of class literals, i.e. the test classes to be run:</p>

<p>```java
@RunWith(Suite.class)
@SuiteClasses({</p>

<pre><code>SomeTest.class,
YetAnotherTest.class
</code></pre>

<p>})
public class AllTests {}
```</p>

<p>Literals have a severe limitation: they must be know at compile-time! Thus, when using the <code>Suite</code> runner, there was no way of determining the classes to run by any other means such as scanning the current classpath.</p>

<h3>ClasspathSuite to the rescue</h3>

<p>For this original purpose, Johannes Link created the <a href="http://johanneslink.net/projects/cpsuite.jsp"><code>ClasspathSuite</code></a> runner. Its basic usage is very simple: just specify it using the <code>@RunWith</code> annotation. In addition, you can also include test classes in JAR files, filter by class names or types, and so on:</p>

<p><code>java
@RunWith(ClasspathSuite.class)
@IncludeJars(true)
@ClassnameFilters({".*Test", "!.*AllTests"})
@BaseTypeFilter(MyBaseTest.class)
public class AllTests {}
</code></p>

<p>However, the <code>ClasspathSuite</code> does not support JUnit's categories as mentioned in an <a href="/blog/2010/03/13/applying-dry-to-junit-categories/">earlier blog post</a>. While it could certainly be extended to support the Category-related annotations <code>@IncludeCategory</code> and <code>@ExcludeCategory</code>, the <code>SuiteBuilder</code> offers a more flexible alternative.</p>

<h3>Introducing SuiteBuilder</h3>

<p>The <code>SuiteBuilder</code> runner is similar to the <code>Suite</code> runner, but reads the test classes it is supposed to run from a field of the suite class annotated with <code>@Classes</code>. The field can be freely initialized to hold an implementation of the <code>SuiteBuilder.Classes.Value</code> interface which simply wraps a collection of classes. E.g., the first example can be rewritten using the <code>SuiteBuilder</code>:</p>

<p>```java
@RunWith(SuiteBuilder.class)
public class AllTests {</p>

<pre><code>@Classes
public Listed classes =
    new Listed(SomeTest.class, YetAnotherTest.class);
</code></pre>

<p>}
```</p>

<p>In addition, you can filter the resulting test runners by annotating a field of type <code>SuiteBuilder.RunnerFilter.Value</code> with <code>@RunnerFilter</code>. For example, the latest commit included a <code>CategoryFilter</code> that filters tests by category:</p>

<p>```java
@RunWith(SuiteBuilder.class)
public class OnlyYes {</p>

<pre><code>@Classes
public Listed classes =
    new Listed(SomeTest.class, YetAnotherTest.class);

@RunnerFilter
public CategoryFilter filter = CategoryFilter.include(Yes.class);
</code></pre>

<p>}
```</p>

<h3>Putting the pieces together</h3>

<p>So what? Well, instead of specifying the classes explicitly you could employ the capabilities of the <code>ClasspathSuite</code> to determine the test classes dynamically. For this purpose, I have written a small wrapper around Johannes Links' <code>ClasspathSuite</code>. The above example can thus be rewritten without explicitly specifying the test classes:</p>

<p>```java
@RunWith(SuiteBuilder.class)
public class OnlyYes {</p>

<pre><code>@Classes
public InClasspath classes = new InClasspath();

@RunnerFilter
public CategoryFilter filter = CategoryFilter.include(Yes.class);
</code></pre>

<p>}
```</p>

<p>The wrapper offers the same flexibility as the <code>ClasspathSuite</code>, e.g.:</p>

<p>```java
@RunWith(SuiteBuilder.class)
public class OnlyYes {</p>

<pre><code>@Classes
public InClasspath classes = new InClasspath().includingJars()
        .filteredBy(".*Test", "!.*AllTests")
        .includingOnlySubclassesOf(MyBaseTest.class);

@RunnerFilter
public CategoryFilter filter = CategoryFilter.include(Yes.class);
</code></pre>

<p>}
```</p>

<p>While I will look into how this can be integrated into JUnit or ClasspathSuite feel free to contact me if you are interested in the source code of the <code>InClasspath</code> class.</p>

<h3>Update</h3>

<p>I am currently working on integrating ClasspathSuite and InClasspath into core JUnit... In the meantime, you can <a href="http://github.com/marcphilipp/junit/tree/master/src/main/java/org/junit/experimental/cpsuite/">take a look at the code on GitHub</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Applying DRY to JUnit Categories]]></title>
    <link href="http://www.marcphilipp.de/blog/2010/03/13/applying-dry-to-junit-categories/"/>
    <updated>2010-03-13T22:08:00+01:00</updated>
    <id>http://www.marcphilipp.de/blog/2010/03/13/applying-dry-to-junit-categories</id>
    <content type="html"><![CDATA[<p>Long awaited, <a href="http://kentbeck.github.com/junit/doc/ReleaseNotes4.8.html">JUnit 4.8</a> introduced support for categorizing test cases.</p>

<p>A category marker is simply a class or interface, e.g.</p>

<p><code>java
public interface SlowTests {}
</code></p>

<p>Tests can be marked using the <code>@Category</code> annotation:</p>

<p>```java
public class A {</p>

<pre><code>@Test
public void a() {}

@Category(SlowTests.class)
@Test
public void b() {}
</code></pre>

<p>}
```</p>

<p>The annotation works both on methods and classes:</p>

<p>```java
@Category(SlowTests.class)
public class B {</p>

<pre><code>@Test
public void c() {}
</code></pre>

<p>}
```</p>

<p>Test suites that include or exclude the <code>SlowTests</code> category are defined by specifying the <code>Categories</code> runner and using the <code>@ExcludeCategory</code> or <code>@IncludeCategory</code> annotation, respectively:</p>

<p>```java
@RunWith(Categories.class)
@SuiteClasses( { A.class, B.class })
@ExcludeCategory(SlowTests.class)
public class AllFastTests extends AllTests {}</p>

<p>@RunWith(Categories.class)
@SuiteClasses( { A.class, B.class })
@IncludeCategory(SlowTests.class)
public class AllSlowTests extends AllTests {}
```</p>

<p>In this example, <code>AllFastTests</code> would execute only <code>A.a</code> while <code>AllSlowTests</code> would ignore <code>A.a</code> but run <code>A.b</code> and <code>B.c</code>.</p>

<p>However, there is a major issue in the above suite declarations: they violate the <a href="http://c2.com/cgi/wiki?DontRepeatYourself" title="Don't Repeat Yourself">DRY</a> principle. Both test suites list all test classes in the <code>@SuiteClasses</code> annotation. While it seems feasible to maintain the list of test classes at two locations for a small number of classes, it certainly is not a viable option in a real-world setting, especially when there are multiple categories.</p>

<p>Fortunately, there is a simple solution: use inheritance. You can define the list of test classes once in a normal test suite …</p>

<p><code>java
@RunWith(Suite.class)
@SuiteClasses( { A.class, B.class })
public class AllTests {}
</code></p>

<p>… and declare subclasses that filter the list of classes by category:</p>

<p>```java
@RunWith(Categories.class)
@ExcludeCategory(SlowTests.class)
public class AllFastTests extends AllTests {}</p>

<p>@RunWith(Categories.class)
@IncludeCategory(SlowTests.class)
public class AllSlowTests extends AllTests {}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generic Matcher Pitfalls]]></title>
    <link href="http://www.marcphilipp.de/blog/2010/02/16/generic-matcher-pitfalls/"/>
    <updated>2010-02-16T22:45:00+01:00</updated>
    <id>http://www.marcphilipp.de/blog/2010/02/16/generic-matcher-pitfalls</id>
    <content type="html"><![CDATA[<p>Using <a href="http://code.google.com/p/hamcrest/">Hamcrest</a> matchers in combination with <code>assertThat</code> allows for more fluid specification of JUnit assertions.</p>

<p>Recently, while working on the backend of <a href="http://projectusus.org/">Project Usus</a>, we needed a simple matcher, that would test whether a given set is empty. At the time, we reused a set matcher we had already written a few minutes earlier.</p>

<p>Today, I had another look at the pre-defined matchers that come with Hamcrest and found the <code>empty()</code> matcher in <code>org.hamcrest.Matchers</code>. Since I'm not concerned with the actual implementation (at least for now), I'll just give you the factory method:</p>

<p>```java
@Factory
public static <E> Matcher&lt;Collection<E>> empty() {</p>

<pre><code>return new IsEmptyCollection&lt;E&gt;();
</code></pre>

<p>}
```</p>

<p>Great, I thought. So I readily changed our tests to use the pre-defined matcher…</p>

<p><code>java
assertThat(new TreeSet&lt;String&gt;(), empty());
</code></p>

<p>However, this yielded a compile error because the compiler could not infer the type parameter of the method. It <em>did</em> work when stating the type parameter of the static method explicitly:</p>

<p><code>java
assertThat(new TreeSet&lt;String&gt;(), Matchers.&lt;String&gt;empty());
</code></p>

<p>But that looked horrible. My first shot was to define an own factory method…</p>

<p>```java
@Factory
public static <E> Matcher&lt;Collection<E>> emptyOf(Class<E> clazz) {</p>

<pre><code>return new IsEmptyCollection&lt;E&gt;();
</code></pre>

<p>}
```</p>

<p>…that can be used like this:</p>

<p><code>java
assertThat(new TreeSet&lt;String&gt;(), emptyOf(String.class));
</code></p>

<p>I was still not very pleased with the solution. Even more since it does not matter at all what kind of objects are inside the collection to determine whether it is empty. After playing around for a little while I came up with this solution:</p>

<p>```java
public class IsEmptyCollection extends TypeSafeMatcher&lt;Collection&lt;?>> {</p>

<pre><code>@Override
protected boolean matchesSafely(Collection&lt;?&gt; collection) {
    return collection.isEmpty();
}

public void describeTo(Description description) {
    description.appendText("empty");
}

@Factory
public static Matcher&lt;Collection&lt;?&gt;&gt; empty() {
    return new IsEmptyCollection();
}
</code></pre>

<p>}
```</p>

<p>In conclusion, I think it is not trivial to write usable generic matchers. Therefore, avoid generics when you don't need them!</p>
]]></content>
  </entry>
  
</feed>
